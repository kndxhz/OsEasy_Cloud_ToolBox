name: Build and Release .NET Framework App

on:
  workflow_dispatch:
    inputs:
      comment:
        description: "Trigger reason (optional)"
        required: false

jobs:
  update-version-and-build:
    name: Update Version, Build, and Release
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET Framework
        uses: microsoft/setup-msbuild@v1

      - name: Extract Current Version
        id: extract_version
        run: |
          $filePath = "./Properties/AssemblyInfo.cs"
          $content = Get-Content $filePath
          $regex = 'AssemblyVersion\("(\d+)\.(\d+)\.(\d+)\.(\d+)"\)'
          if ($content -match $regex) {
              $major = [int]$matches[1]
              $minor = [int]$matches[2]
              $build = [int]$matches[3]
              $revision = [int]$matches[4] + 1
              $newVersion = "$major.$minor.$build.$revision"
              $updatedContent = $content -replace $regex, "AssemblyVersion(\"$newVersion\")"
              Set-Content $filePath $updatedContent
              echo "::set-output name=new_version::$newVersion"
          } else {
              throw "AssemblyVersion not found in $filePath"
          }

      - name: Commit Updated Version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ./Properties/AssemblyInfo.cs
          git commit -m "Update version to ${{ steps.extract_version.outputs.new_version }}"

      - name: Build Project
        run: |
          msbuild YourProjectName.sln /p:Configuration=Release

      - name: Get Commit Logs
        id: get_logs
        run: |
          $ignoreCommit = (git log -1 --pretty=format:"%H")
          $logs = git log --pretty=format:"- %s (#%h, @%an)" --no-merges
          $logs = $logs | Where-Object { $_ -notmatch $ignoreCommit }
          echo "::set-output name=logs::$logs"

      - name: Upload Release Assets
        id: release
        uses: actions/upload-artifact@v3
        with:
          name: built-application
          path: ./bin/Release/YourApp.exe

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.new_version }}
          release_name: ${{ steps.extract_version.outputs.new_version }}
          body: |
            # 版本号
            ## 提交记录
            ${{ steps.get_logs.outputs.logs }}
          draft: false
          prerelease: false

      - name: Upload EXE to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./bin/Release/YourApp.exe
          asset_name: YourApp.exe
          asset_content_type: application/octet-stream
